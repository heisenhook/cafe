const app = require ('../app');
const log = require('../util/logger').createLogger('www');

require('dotenv').config;
const HOST = process.env.HOST || '127.0.0.1';
const PORT = process.env.PORT || 3000;

const server = app.listen(PORT, (err) => {
    if (err) log.error(err);
});

const io = require('socket.io')(server, {
  cors: { origin: '*'}
});

server.on('error', onError);
server.on('listening', onListening);

io.on('connection', (socket) => {
  // websocket stuff go here!!
});

io.listen(WEBHOOK_PORT, () => log.info(`socket listening @ ${HOST}:${WEBHOOK_PORT} `));

function normalizePort(val) {
    const port = parseInt(val, 10);
  
    if (isNaN(port)) {
      // named pipe
      return val;
    }
  
    if (port >= 0) {
      // port number
      return port;
    }
  
    return false;
}

// event handlers
function onError(error) {
    if (error.syscall !== "listen") {
      throw error;
    }
  
    const bind = typeof port === "string"
      ? "Pipe " + port
      : "Port " + port;
  
    // handle specific listen errors with friendly messages
    switch (error.code) {
    case "EACCES":
      log.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      log.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
    }
}

function onListening() {
    log.info(`server listening @ http://${HOST}:${PORT}`);
}